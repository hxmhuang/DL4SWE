!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Axes3D	utils.py	/^from mpl_toolkits.mplot3d import Axes3D$/;"	i
H	tf_swe.py	/^H  =tf.placeholder(tf.float64, shape=(n+2,n+2))$/;"	v
H_	tf_swe.py	/^H_ = corner_regulation(H_left + H_right + H_top + H_bottom + H_inner)$/;"	v
H_bottom	tf_swe.py	/^H_bottom = copy_2nd_to_1st_bottom(H)$/;"	v
H_init	tf_swe.py	/^H_init = np.ones([n+2,n+2], dtype=np.float64)$/;"	v
H_inner	tf_swe.py	/^H_inner = get_circle_inner(H)$/;"	v
H_left	tf_swe.py	/^H_left = copy_2nd_to_1st_left(H)$/;"	v
H_next	tf_swe.py	/^H_next = H_ - expand_surround(dH)$/;"	v
H_right	tf_swe.py	/^H_right = copy_2nd_to_1st_right(H)$/;"	v
H_top	tf_swe.py	/^H_top = copy_2nd_to_1st_top(H)$/;"	v
Hx	tf_swe.py	/^Hx = xplus_forward(H_)\/2 - dt\/(2*dx)*xsub_forward(U_) $/;"	v
Hy	tf_swe.py	/^Hy = yplus_forward(H_)\/2 - dt\/(2*dy)*ysub_forward(V_)$/;"	v
U	tf_swe.py	/^U  =tf.placeholder(tf.float64, shape=(n+2,n+2))$/;"	v
U_	tf_swe.py	/^U_ = U_top + U_bottom + U_inner$/;"	v
U_	tf_swe.py	/^U_ = lr_to_zero(U_)$/;"	v
U_bottom	tf_swe.py	/^U_bottom= -copy_2nd_to_1st_bottom(U)$/;"	v
U_init	tf_swe.py	/^U_init = np.zeros([n+2,n+2], dtype=np.float64)$/;"	v
U_inner	tf_swe.py	/^U_inner = get_tb_inner(U)$/;"	v
U_next	tf_swe.py	/^U_next = U_ - expand_surround(dU)$/;"	v
U_top	tf_swe.py	/^U_top = -copy_2nd_to_1st_top(U)$/;"	v
Ux	tf_swe.py	/^Ux = xplus_forward(U_)\/2 - dt\/(2*dx)* xsub_forward(tf.divide(tf.square(U_), H_) + g\/2*tf.square(H_)) $/;"	v
Uy	tf_swe.py	/^Uy = yplus_forward(U_)\/2 - dt\/(2*dy)* ysub_forward(tf.divide(tf.multiply(U_,V_), H_))  $/;"	v
V	tf_swe.py	/^V  =tf.placeholder(tf.float64, shape=(n+2,n+2))$/;"	v
V_	tf_swe.py	/^V_ = V_left + V_right + V_inner$/;"	v
V_	tf_swe.py	/^V_ = tb_to_zero(V_)$/;"	v
V_init	tf_swe.py	/^V_init = np.zeros([n+2,n+2], dtype=np.float64)$/;"	v
V_inner	tf_swe.py	/^V_inner = get_lr_inner(V)$/;"	v
V_left	tf_swe.py	/^V_left = -copy_2nd_to_1st_left(V)$/;"	v
V_next	tf_swe.py	/^V_next = V_ - expand_surround(dV)$/;"	v
V_right	tf_swe.py	/^V_right = -copy_2nd_to_1st_right(V)$/;"	v
Vx	tf_swe.py	/^Vx = xplus_forward(V_)\/2 - dt\/(2*dx)* xsub_forward(tf.divide(tf.multiply(U_,V_),H_ ))$/;"	v
Vy	tf_swe.py	/^Vy = yplus_forward(V_)\/2 - dt\/(2*dy)* ysub_forward(tf.divide(tf.square(V_), H_ ) + g\/2*tf.square(H_)) $/;"	v
copy_2nd_to_1st_bottom	op.py	/^def copy_2nd_to_1st_bottom(var):$/;"	f
copy_2nd_to_1st_left	op.py	/^def copy_2nd_to_1st_left(var):$/;"	f
copy_2nd_to_1st_right	op.py	/^def copy_2nd_to_1st_right(var):$/;"	f
copy_2nd_to_1st_top	op.py	/^def copy_2nd_to_1st_top(var):$/;"	f
corner_regulation	op.py	/^def corner_regulation(var):$/;"	f
dH	tf_swe.py	/^dH = (dt\/dx)* xsub_backward(Ux) + (dt\/dy)* ysub_backward(Vy)$/;"	v
dU	tf_swe.py	/^dU = (dt\/dx)* xsub_backward(tf.divide(tf.square(Ux),Hx) + g\/2*tf.square(Hx)) +        (dt\/dy)* ysub_backward(tf.divide(tf.multiply(Vy,Uy), Hy))$/;"	v
dV	tf_swe.py	/^dV = (dt\/dx)* xsub_backward(tf.divide(tf.multiply(Ux,Vx), Hx)) +        (dt\/dy)* ysub_backward(tf.divide(tf.square(Vy),Hy) + g\/2*tf.square(Hy))$/;"	v
draw_3D	utils.py	/^def draw_3D(y, n):$/;"	f
dt	tf_swe.py	/^dt = 0.5$/;"	v
dx	tf_swe.py	/^dx = 1000.0$/;"	v
dy	tf_swe.py	/^dy = 1000.0$/;"	v
en_loss	tf_swe.py	/^en_loss = tf.square(tf.reduce_sum(get_circle_inner(0.5*tf.square(U_next) + 0.5*tf.square(V_next) + g*H_next)) - tot_en)$/;"	v
exit	tf_swe.py	/^from sys import exit$/;"	i
expand_bottom	op.py	/^def expand_bottom(var):$/;"	f
expand_left	op.py	/^def expand_left(var):$/;"	f
expand_right	op.py	/^def expand_right(var):$/;"	f
expand_surround	op.py	/^def expand_surround(var):$/;"	f
expand_top	op.py	/^def expand_top(var):$/;"	f
feed_dict_init	tf_swe.py	/^    feed_dict_init = {H:H_init, U:U_init, V:V_init}$/;"	v
feed_dict_iter	tf_swe.py	/^        feed_dict_iter = {H:H_, U:U_, V:V_}$/;"	v
feed_dict_iter	tf_swe.py	/^    feed_dict_iter = {H:H_, U:U_, V:V_}$/;"	v
g	tf_swe.py	/^g = 9.8$/;"	v
get_circle_inner	op.py	/^def get_circle_inner(var):$/;"	f
get_inner_conservation	tf_swe.py	/^def get_inner_conservation(H_init, U_init, V_init):$/;"	f
get_inner_conservation1	tf_swe.py	/^def get_inner_conservation1(H_init, U_init, V_init):$/;"	f
get_lr_inner	op.py	/^def get_lr_inner(var):$/;"	f
get_tb_inner	op.py	/^def get_tb_inner(var):$/;"	f
h_loss	tf_swe.py	/^h_loss = tf.square(tf.reduce_sum(get_circle_inner(H_next)) - tot_h)$/;"	v
iter_op	tf_swe.py	/^iter_op = [H_next, U_next, V_next]$/;"	v
loss	tf_swe.py	/^loss = en_loss + h_loss$/;"	v
lr_to_zero	op.py	/^def lr_to_zero(var):$/;"	f
make_kernel	op.py	/^def make_kernel(a):$/;"	f
n	tf_swe.py	/^n = 7 $/;"	v
np	op.py	/^import numpy as np$/;"	i
np	tf_swe.py	/^import numpy as np$/;"	i
np	utils.py	/^import numpy as np$/;"	i
optimizer	tf_swe.py	/^optimizer = tf.train.AdamOptimizer(3e-4, beta1=0.5, beta2=0.9).minimize(loss)$/;"	v
os	op.py	/^import os$/;"	i
os	tf_swe.py	/^import os$/;"	i
plt	utils.py	/^from matplotlib import pyplot as plt$/;"	i
result_H	tf_swe.py	/^    result_H = []$/;"	v
result_U	tf_swe.py	/^    result_U = []$/;"	v
result_V	tf_swe.py	/^    result_V = []$/;"	v
simple_conv	op.py	/^def simple_conv(x, k):$/;"	f
tb_to_zero	op.py	/^def tb_to_zero(var):$/;"	f
tf	op.py	/^import tensorflow as tf$/;"	i
tf	tf_swe.py	/^import tensorflow as tf$/;"	i
tot_step	tf_swe.py	/^tot_step = 4000$/;"	v
xplus_backward	op.py	/^def xplus_backward(x, expand_type=None):$/;"	f
xplus_forward	op.py	/^def xplus_forward(x, expand_type=None):$/;"	f
xsub_backward	op.py	/^def xsub_backward(x, expand_type=None):$/;"	f
xsub_forward	op.py	/^def xsub_forward(x, expand_type=None):$/;"	f
yplus_backward	op.py	/^def yplus_backward(y, expand_type=None):$/;"	f
yplus_forward	op.py	/^def yplus_forward(y, expand_type=None):$/;"	f
ysub_backward	op.py	/^def ysub_backward(y, expand_type=None):$/;"	f
ysub_forward	op.py	/^def ysub_forward(y, expand_type=None):$/;"	f
